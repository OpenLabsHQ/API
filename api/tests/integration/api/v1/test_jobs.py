import random

import pytest
from httpx import AsyncClient

from src.app.enums.job_status import OpenLabsJobStatus
from src.app.schemas.range_schemas import DeployedRangeSchema
from tests.api_test_utils import (
    authenticate_client,
    get_job,
    get_jobs,
    login_user,
    logout_user,
)
from tests.deploy_test_utils import (
    RangeType,
    provider_test_id,
    range_test_id,
)
from tests.integration.api.v1.config import PROVIDER_PARAMS, RANGE_TYPE_PARAMS


@pytest.mark.asyncio(loop_scope="session")
@pytest.mark.parametrize(
    "provider_deployed_ranges_for_provider",
    PROVIDER_PARAMS,
    indirect=True,
    ids=provider_test_id,
)
@pytest.mark.parametrize("range_type", RANGE_TYPE_PARAMS, ids=range_test_id)
class TestJobs:
    """Test suite for /jobs endpoints leveraging the job records generated by tested range deployments."""

    async def test_get_all_jobs(
        self,
        integration_client: AsyncClient,
        provider_deployed_ranges_for_provider: dict[
            RangeType, tuple[DeployedRangeSchema, str, str]
        ],
        range_type: RangeType,
    ) -> None:
        """Test that we can find the completed deploy job associated with this range type and provider."""
        deployed_range = provider_deployed_ranges_for_provider[range_type]
        range_info, email, password = deployed_range

        assert await login_user(
            integration_client, email, password
        ), "Failed to login to deployed range account."

        # Get jobs
        complete_jobs = await get_jobs(
            integration_client, job_status=OpenLabsJobStatus.COMPLETE
        )
        assert complete_jobs, "No complete jobs found!"

        # Check that this range's deploy job is present
        assert any(
            range_info.id == job.result["id"] and job.job_name == "deploy_range"  # type: ignore
            for job in complete_jobs
        )

    async def test_get_all_jobs_unauthorized_fails(
        self,
        integration_client: AsyncClient,
        provider_deployed_ranges_for_provider: dict[
            RangeType, tuple[DeployedRangeSchema, str, str]
        ],
        range_type: RangeType,
    ) -> None:
        """Test we can't fetch jobs from an unauthorized account."""
        deployed_range = provider_deployed_ranges_for_provider[range_type]
        range_info, email, password = deployed_range

        assert await login_user(
            integration_client, email, password
        ), "Failed to login to deployed range account."

        # Get jobs
        complete_jobs = await get_jobs(integration_client, job_status=None)
        assert complete_jobs, "No complete jobs found!"

        # Try to fetch a random job individually through another account
        assert await logout_user(integration_client)

        assert await authenticate_client(integration_client)

        # Ensure that we can't find the job associated with the deploy
        # request in the original account
        complete_jobs = await get_jobs(integration_client, job_status=None)
        assert not any(range_info.id == job.result["id"] for job in complete_jobs)  # type: ignore

    async def test_get_job(
        self,
        integration_client: AsyncClient,
        provider_deployed_ranges_for_provider: dict[
            RangeType, tuple[DeployedRangeSchema, str, str]
        ],
        range_type: RangeType,
    ) -> None:
        """Test we can fetch individual jobs."""
        deployed_range = provider_deployed_ranges_for_provider[range_type]
        range_info, email, password = deployed_range

        assert await login_user(
            integration_client, email, password
        ), "Failed to login to deployed range account."

        # Get jobs
        complete_jobs = await get_jobs(
            integration_client, job_status=OpenLabsJobStatus.COMPLETE
        )
        assert complete_jobs, "No complete jobs found!"

        # Try to fetch a random job individually
        random_job = random.choice(complete_jobs)  # noqa: S311

        # By primary key (int)
        id_job_details = await get_job(integration_client, random_job.id)
        assert id_job_details, f"Failed to fetch job {random_job.id} by ID."
        assert id_job_details.model_dump(mode="json") == random_job.model_dump(
            mode="json"
        ), f"Job {random_job.id} fetched by ID not identical."

        # By ARQ ID
        arq_id_job_details = await get_job(integration_client, random_job.arq_job_id)
        assert (
            arq_id_job_details
        ), f"Failed to fetch job {random_job.id} (ARQ ID: {random_job.arq_job_id}) by arq_job_id."
        assert arq_id_job_details.model_dump(mode="json") == random_job.model_dump(
            mode="json"
        ), f"Job {random_job.id} (ARQ ID: {random_job.arq_job_id}) fetched by arq_job_id not identical."

    async def test_get_job_unauthorized_job_fails(
        self,
        integration_client: AsyncClient,
        provider_deployed_ranges_for_provider: dict[
            RangeType, tuple[DeployedRangeSchema, str, str]
        ],
        range_type: RangeType,
    ) -> None:
        """Test we can't fetch jobs from an unauthorized account."""
        deployed_range = provider_deployed_ranges_for_provider[range_type]
        range_info, email, password = deployed_range

        assert await login_user(
            integration_client, email, password
        ), "Failed to login to deployed range account."

        # Get jobs
        complete_jobs = await get_jobs(integration_client, job_status=None)
        assert complete_jobs, "No complete jobs found!"

        random_job = random.choice(complete_jobs)  # noqa: S311

        # Test we can fetch the job as the correct user
        job_details = await get_job(integration_client, random_job.id)
        assert job_details, f"Failed to fetch job {random_job.id} by ID."

        # Try to fetch a random job individually through another account
        assert await logout_user(integration_client)

        assert await authenticate_client(integration_client)

        # Ensure that it fails
        job_details = await get_job(integration_client, random_job.id)
        assert (
            job_details is None
        ), f"Fetched job {random_job.id} with UNauthorized account!"
